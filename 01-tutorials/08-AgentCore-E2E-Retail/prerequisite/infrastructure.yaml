AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Retail System with DynamoDB tables, SSM parameters, and synthetic data'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Lambda Code Configuration
        Parameters:
          - LambdaS3Bucket
          - LambdaS3Key
          
Parameters:

  LambdaS3Bucket:
    Description: The name of S3 bucket which contains lambda code
    Type: String
    MinLength: 1
  
  LambdaS3Key:
    Description: The S3 object key which contains retail assistant code in zip format
    Type: String
    MinLength: 1
    
  LayerS3Key:
    Type: String
    Description: 'S3 key for the DDGS layer zip file'
    MinLength: 1
    
Resources:

  RuntimeAgentCoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock-agentcore.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECRImageAccess
                Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/bedrock_agentcore-retail*
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock-agentcore/runtimes/*
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock-agentcore/runtimes/*:log-stream:*
              - Sid: ECRTokenAccess
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    cloudwatch:namespace: bedrock-agentcore
              - Sid: GetAgentAccessToken
                Effect: Allow
                Action:
                  - bedrock-agentcore:GetWorkloadAccessToken
                  - bedrock-agentcore:GetWorkloadAccessTokenForJWT
                  - bedrock-agentcore:GetWorkloadAccessTokenForUserId
                Resource:
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:workload-identity-directory/default
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:workload-identity-directory/default/workload-identity/retail*
              - Sid: ProvisionedThroughputModelInvocation
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - "arn:aws:bedrock:*::foundation-model/*"
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:*
              - Sid: SSMGetparam
                Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app/retail/*
              - Sid: Identity
                Effect: Allow
                Action:
                  - bedrock-agentcore:GetResourceOauth2Token
                Resource:
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:token-vault/default/oauth2credentialprovider/retail*
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:workload-identity-directory/default/workload-identity/retail*
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:workload-identity-directory/default
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:token-vault/default
              - Sid: SecretManager
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:bedrock-agentcore-identity!default/oauth2/retail*
              - Sid: AgentCoreMemory
                Effect: Allow
                Action:
                  - bedrock-agentcore:ListMemories
                  - bedrock-agentcore:ListMemoryRecords
                  - bedrock-agentcore:RetrieveMemoryRecords
                  - bedrock-agentcore:GetMemory
                  - bedrock-agentcore:GetMemoryRecord
                  - bedrock-agentcore:CreateEvent
                  - bedrock-agentcore:GetEvent
                Resource:
                  - !Sub arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:memory/retail*

        
  GatewayAgentCoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock-agentcore.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: InvokeFunction
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt RetailLambda.Arn

  # DynamoDB Table for Product Information
  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: category-index
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Application
          Value: Retail
        - Key: CostCenter
          Value: Retail

  # DynamoDB Table for Order Information
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: order_id
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
      KeySchema:
        - AttributeName: order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: customer-index
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Application
          Value: Retail
        - Key: CostCenter
          Value: Retail

  # Lambda function to populate synthetic data
  PopulateDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt PopulateDataRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          from datetime import datetime, timedelta
          import random
          import uuid
          from decimal import Decimal

          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      dynamodb = boto3.resource('dynamodb')
                      product_table_name = event['ResourceProperties']['ProductTableName']
                      order_table_name = event['ResourceProperties']['OrderTableName']
                      
                      product_table = dynamodb.Table(product_table_name)
                      order_table = dynamodb.Table(order_table_name)
                      
                      # Product data
                      product_data = [
                          {
                              'product_id': 'PROD001',
                              'name': 'Wireless Bluetooth Headphones',
                              'category': 'electronics',
                              'price': 89.99,
                              'description': 'High-quality wireless headphones with noise cancellation',
                              'brand': 'AudioTech',
                              'in_stock': True,
                              'stock_quantity': 45,
                              'rating': 4.5,
                              'reviews_count': 1247
                          },
                          {
                              'product_id': 'PROD002',
                              'name': 'Gaming Laptop Pro',
                              'category': 'electronics',
                              'price': 1299.99,
                              'description': 'High-performance gaming laptop with RTX graphics',
                              'brand': 'GameForce',
                              'in_stock': True,
                              'stock_quantity': 12,
                              'rating': 4.8,
                              'reviews_count': 892
                          },
                          {
                              'product_id': 'PROD003',
                              'name': 'Smartphone Case',
                              'category': 'electronics',
                              'price': 24.99,
                              'description': 'Protective case for smartphones',
                              'brand': 'ProtectPro',
                              'in_stock': True,
                              'stock_quantity': 234,
                              'rating': 4.2,
                              'reviews_count': 2156
                          },
                          {
                              'product_id': 'PROD004',
                              'name': 'Running Shoes',
                              'category': 'clothing',
                              'price': 129.99,
                              'description': 'Comfortable running shoes for daily exercise',
                              'brand': 'SportMax',
                              'in_stock': False,
                              'stock_quantity': 0,
                              'rating': 4.6,
                              'reviews_count': 567
                          },
                          {
                              'product_id': 'PROD005',
                              'name': 'Programming Book: Python Mastery',
                              'category': 'books',
                              'price': 39.99,
                              'description': 'Comprehensive guide to Python programming',
                              'brand': 'TechBooks',
                              'in_stock': True,
                              'stock_quantity': 89,
                              'rating': 4.7,
                              'reviews_count': 234
                          }
                      ]
                      
                      # Order data
                      order_data = [
                          {
                              'order_id': 'ORD12345',
                              'customer_id': 'CUST001',
                              'status': 'Shipped',
                              'order_date': '2024-01-15',
                              'total_amount': 89.99,
                              'items': [
                                  {'product_id': 'PROD001', 'quantity': 1, 'price': 89.99}
                              ],
                              'shipping_address': '123 Main St, Anytown, ST 12345'
                          },
                          {
                              'order_id': 'ORD12346',
                              'customer_id': 'CUST002',
                              'status': 'Processing',
                              'order_date': '2024-01-16',
                              'total_amount': 1299.99,
                              'items': [
                                  {'product_id': 'PROD002', 'quantity': 1, 'price': 1299.99}
                              ],
                              'shipping_address': '456 Oak Ave, Another City, ST 67890'
                          }
                      ]
                      
                      # Insert product data
                      with product_table.batch_writer() as batch:
                          for item in product_data:
                              item = json.loads(json.dumps(item), parse_float=Decimal)
                              batch.put_item(Item=item)
                      
                      # Insert order data
                      with order_table.batch_writer() as batch:
                          for item in order_data:
                              item = json.loads(json.dumps(item), parse_float=Decimal)
                              batch.put_item(Item=item)
                      
                      print(f"Successfully populated {len(product_data)} products")
                      print(f"Successfully populated {len(order_data)} orders")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM Role for Lambda function
  PopulateDataRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt ProductTable.Arn
                  - !GetAtt OrderTable.Arn
        - PolicyName: AllowBasicLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  # Custom resource to trigger Lambda function
  PopulateData:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt PopulateDataFunction.Arn
      ProductTableName: !Ref ProductTable
      OrderTableName: !Ref OrderTable
    DependsOn:
      - ProductTable
      - OrderTable
  
  # Lambda target
  RetailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: ProductAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowReadProductTableNameFromSSM
                Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ProductTableNameParameter}

              - Sid: AllowReadProductTable
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductTable}

              - Sid: AllowReadProductTableIndexes
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductTable}/index/*

        - PolicyName: OrderAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowReadOrderTableNameFromSSM
                Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${OrderTableNameParameter}

              - Sid: AllowReadOrderTable
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OrderTable}

              - Sid: AllowReadOrderTableIndexes
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OrderTable}/index/*

  DDGSLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-ddgs-layer"
      Description: 'DDGS package for Lambda functions'
      Content:
        S3Bucket: !Ref  LambdaS3Bucket
        S3Key: !Ref LayerS3Key
      CompatibleRuntimes:
        - python3.12
      CompatibleArchitectures:
        - x86_64

  RetailLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Lambda function for Retail Assistant'
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Role: !GetAtt RetailLambdaRole.Arn
      Runtime: python3.12
      PackageType: Zip
      Architectures:
        - x86_64
      Layers:
        - !Ref DDGSLayer
      Environment:
        Variables:
          PYTHONPATH: /opt/python

  
# SSM Parameter to store product table name
  ProductTableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/retail/dynamodb/product_table_name
      Type: String
      Value: !Ref ProductTable
      Description: DynamoDB table name for product information
      Tags:
        Application: Retail

  # SSM Parameter to store order table name
  OrderTableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/retail/dynamodb/order_table_name
      Type: String
      Value: !Ref OrderTable
      Description: DynamoDB table name for order information
      Tags:
        Application: Retail

  GatewayAgentcoreIAMRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/retail/agentcore/gateway_iam_role
      Type: String
      Value: !GetAtt GatewayAgentCoreRole.Arn
      Description: agentcore IAM role to assume
      Tags:
        Application: Retail

  RuntimeAgentcoreIAMRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/retail/agentcore/runtime_iam_role
      Type: String
      Value: !GetAtt RuntimeAgentCoreRole.Arn
      Description: agentcore IAM role to assume
      Tags:
        Application: Retail

  LambdaArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /app/retail/agentcore/lambda_arn
      Type: String
      Value: !GetAtt RetailLambda.Arn
      Description: ARN of the lambda that integrates with agentcore
      Tags:
        Application: Retail

Outputs:
  ProductTableName:
    Description: 'DynamoDB table for product information'
    Value: !Ref ProductTable

  OrderTableName:
    Description: 'DynamoDB table for order information'
    Value: !Ref OrderTable

  LambdaArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt RetailLambda.Arn